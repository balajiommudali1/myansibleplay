//#!groovy
/*
 * @file:Jenkinsfile
 * @brief: Jenkins pipeline script to support all micro-service (dev-ci-cd)
 * @author:AA
 * @credits: https://github.aig.net/commercial-it-config/ael-policy-autobooker-dev-deployments-5416/blob/master/dev/JenkinsFile_Dev
 * @created:14-11-2017
 * @modified:
 */


_node_os="";
_stageArray = [:];

/*[NODES]*/
_linux = "LINUX";
_windows = "WINDOWS";

/*[STAGES]*/
_stageCheckout = "Checkout";
_stageSecurityTesting = "Security Testing";
_stageBuildAutomation = "Build Automation";
_stageUnitTest = "Unit Test";
_stageCodeAnalysis ="Code Analysis";
_stageBuildManagement = "Build Management";
_stageDeployment = "Deployment";
_stageTestAutomation = "Test Automation";

/*[STATES]*/
_success = "Success";
_failure = "Failure";
_notStarted = "Not started";
_buildUnstable = "UNSTABLE";
_buildFailure = "FAILURE";

/*[JENKINS]*/
_jobName = env.JOB_NAME;

/*[GIT]*/
_gitCredentialId = env.SSH_DEVOPSPIPELINE_CRED_ID_GIT;
_gitRepository = "";
_gitBranchName = "";

/*[GIT-JENKINS PIPELINE]*/
_gitPipelineRepository = "github.aig.net/commercial-it-config/devops-ael-policy-autobooker-dev-ci-cd-5416.git";
_gitPipelineRepositoryBranch = "master";


/*[SONAR]*/
_sonarQubeUrl = "${env.CODE_QUALITY_SONAR_URL}";
_sonarQubeDashboardUrl = "${env.CODE_QUALITY_SONAR_URL}/dashboard/index/";
_sonarQubeLoginId = env.SONAR_LOGIN_ID;
_sonarQubeScannerPathWindows = env.WIN_SONAR_SCANNER_PATH;
_sonarQubeScannerPathLinux = env.LINUX_SONAR_SCANNER_PATH;//check this if exists
_sonarQubeHome = "";
_sonarQubeScannerPath = "";
_sonarQubeProjectKey = "";

//!!!
_skipSonarQubeBuildBreaker = env.SKIP_SONAR_BUILD_BREAKER;

/*[ARTIFACTORY]*/
_artifactoryBuildName = "";
_artifactoryVirtualRepo = "";
_artifactoryPublishRepo = "";
_artifactoryNamePrefix = "";
_artifactoryBaseFolder = "";

/*[PCF]*/
//PCF props are same for all services
_pcfAppDomain = "apps.xeuw1-pcf.aig.net"
_pcfApiUrl = "https://api.system.xeuw1-pcf.aig.net";
_pcfOrgName = "General-Insurance";
_pcfSpaceName = "DEV";
_pcfAppName = "";


/*[PHOTON]*/
_photonDashboardUrl = "";

/*[EXTENTX]*/
_extentxUrl = env.EXTENTX_URL;

/*[MISC]*/
_jdKHome = "";
_serviceConfigDirectory = "";
_pipelineProps = "";
_commonPipelineProps = "";
_pipelinePropertyFile = "pipeline.properties";
_commonPipelinePropertyFile = "common-pipeline.properties";
_applicationUrl = "";
_buildVersion = "";
_commitBuild = "commercial-it-global-delivery/AEL-POLICY-AUTOBOOKER-5416/dev-ci-cd/Utils/commit-build";

/*[DIRS]*/
_dirPipelineRepo = "pipeline-repo";
_dirBuildSource = "build-source";

//UNICODE
_uniStartStage = "\u273F";
_uniFinishStage = "\u2714";
_uniErrorStage = "\u2716";
_uniAnchor = "\u2693";

//================================================================================
/*[MESSAGES]*/
//Checkout-BuildProps
_messageCheckoutPipelineStart = "${_uniStartStage} Checkout of Build Props.";
_messageCheckoutPipelineFinished = "${_uniFinishStage} Checkout of Build Props completed.";
_errorMessagePipeleineCheckout = "${_uniErrorStage} Error during checkout of build props.";

//Checkout-Java
_messageCheckoutSourceStart = "${_uniStartStage} Checkout Java Code.";
_messageCheckoutSourceFinished = "${_uniFinishStage} Checkout of Java Code completed.";
_errorMessageSourceCheckout = "${_uniErrorStage} Error during checkout Java Code.";

//Checkout-complete
_messageCheckoutStageFinished = "Checkout stage completed.";

//error message in case directory does not exist
_erroMessageOnDirNotExists = "Error: Target directory does not exist.";

//Security Testing
_messageSecurityTestingStart = "${_uniStartStage} Running security test.";
_messageBuildAutomationFinish = "${_uniFinishStage} Security testing completed.";
_errorMessageSecurityTesting = "${_uniErrorStage} Error occured during security testing.";

//BuildAutomation
_messageBuildAutomationStart = "${_uniStartStage} Building Java code.";
_messageBuildAutomationFinish = "${_uniFinishStage} Building Java code completed.";
_errorMessageBuildAutomation = "${_uniErrorStage} Error during building of Java code.";

//UnitTest
_messageUnitTestStart = "${_uniStartStage} Running Unit Test.";
_messageUnitTestFinish = "${_uniFinishStage} Unit Test run successfully."
_errorMessageUnitTest = "${_uniErrorStage} Error occured while running Unit Test."

//CodeAnalysis
_messageCodeAnalysisStart = "${_uniStartStage} Running Code Analysis.";
_messageCodeAnalysisFinish = "${_uniFinishStage} Code Analysis run successfully."
_errorMessageCodeAnalysis = "${_uniErrorStage} Error occured while running Code Analysis." 

//BuildManagement
_messageBuildManagementStart = "${_uniStartStage} Uploading Java binaries to Artifactory.";
_messageBuildManagementFinish ="${_uniFinishStage} Uploading Java binaries to Artifactory completed.";
_errorMessageBuildManagement = "${_uniErrorStage} Error while uploading Java binaries to Artifactory.";

//Deployment
_messageDeploymentStart = "${_uniStartStage} Deployment started.";
_messageDeploymentContainerLogin = "Log in to PCF..."
_messageDeploymentContainerLogout = "Logged out PCF..."
_messageDeploymentFinish = "${_uniFinishStage} Deployment completed.";
_errorMessageDeployment = "${_uniErrorStage} Error while deploying the pacakge to PCF.";
//================================================================================

node('linux')
{
    try 
    {
    	init();

    	executeBuild();
    }    
    finally 
    {
    	/*do cleanup*/
    	println "cleaning up the directory!."
    	deleteDir();
    	step([$class: 'AuditPipelinePublisher', enabled: true]);    	
    }    
}


/*Initialize*/
def init()
{
	//get the current running node OS
	_node_os = isUnix() ? _linux : _windows;
	printCurrentNode();

	//this sets up clean environment
   	deleteDir();

   	//capture build start time
   	captureBuildStartTime();

   	prepareStages();

	//initialize the path to version info json file
	_envVersionInfoFile = "./version/dev_info.json";
}


/*To capture all stages*/
def executeBuild()
{
	try 
	{
		def stepDifferentiator = "----------------------------------------------------------";
		def stageDifferentiator = "__________________________________________________________";

		/*CHECKOUT*/
		stage (_stageCheckout)
		{
			setCurrentStage(_stageCheckout);
			
			//checkout pipeline repository and read pipeline.properties
			runCheckoutPipeline();

			println "${stepDifferentiator}"

			//checkout JAVA
			runCheckoutSource();
			

			//update stage			
			_stageArray.put(_stageCheckout,_success);

			println _messageCheckoutStageFinished;
		}
		println "${stageDifferentiator}"


		/*SECURITY TESTING*/
		/*
		stage(_stageSecurityTesting)
		{
			println _messageSecurityTestingStart;
			runSecurityTesting();
			//update stage
			_stageArray.put(_stageSecurityTesting,_success);
			println _messageSecurityTestingFinish;
			println "${stageDifferentiator}"
		}
		*/

		/*BUILD AUTOMATION*/
		stage (_stageBuildAutomation)
		{
			println _messageBuildAutomationStart;

			setCurrentStage(_stageBuildAutomation);

			runBuildAutomation();
			
			//update stage
			_stageArray.put(_stageBuildAutomation,_success);

			println _messageBuildAutomationFinish;
		}
		println "${stageDifferentiator}"

		/*UNIT TEST*/
		stage (_stageUnitTest)
		{
			println _messageUnitTestStart;
		
			setCurrentStage(_stageUnitTest);

			runUnitTest();

			//update stage
			_stageArray.put(_stageUnitTest,_success);

			println _messageUnitTestFinish;
		}
		println "${stageDifferentiator}"

		/*CODE ANALYSIS*/
		stage (_stageCodeAnalysis)
		{
			println _messageCodeAnalysisStart;	
		
			setCurrentStage(_stageCodeAnalysis);

			runCodeAnalysis();

			//update stage
			_stageArray.put(_stageCodeAnalysis,_success);

			println _messageCodeAnalysisFinish;	
		}
		println "${stageDifferentiator}"

		/*BUILD MANAGEMENT*/
		stage (_stageBuildManagement)
		{
			println _messageBuildManagementStart;		

			setCurrentStage(_stageBuildManagement);

			runBuildManagement();

			//update stage
			_stageArray.put(_stageBuildManagement,_success);

			println _messageBuildManagementFinish;

			println "${stageDifferentiator}";

			//update the tag information in source-repo
			tagIt();

			updateVersionDetails();
		}


		/*DEPLOYMENT*/		
		stage (_stageDeployment)
		{
			println _messageDeploymentStart;
			setCurrentStage(_stageDeployment);

			//runDeployment();
            runBlueGreenDeployment();
                        
			_stageArray.put(_stageDeployment,_success);

			println _messageDeploymentFinish;
		}
		println "${stageDifferentiator}";

		//send success notification
		sendEmailNotification(_success);
	}
	catch(Exception e) 
	{
		//send error notification
		sendEmailNotification(_failure);
		throw e;
	}
}

/* --------------------------------------------------------- */

/*Checkout the Jenkins pipeline script code and read all the key-value properties into variable _pipelineProps*/
def runCheckoutPipeline()
{
	try 
	{
		println _messageCheckoutPipelineStart;

		//creates dir: pipeline-repo		
		if(_node_os == _linux)
			sh "mkdir -p ${_dirPipelineRepo}";
		else
			bat "mkdir ${_dirPipelineRepo}";

		//checkout BuildProps
		dir(_dirPipelineRepo)
		{
			//executeCommand("git config --global core.longpaths true");

			//[JenkinsPipeline] read props from pipeline.properties file			
			//git credentialsId: _gitCredentialId, url: _gitPipelineRepository, branch: _gitPipelineRepositoryBranch
			
			//git clone to check git-hub pipeline repo polling
			clonerepo(_node_os,_gitPipelineRepository,_gitPipelineRepositoryBranch);

			dir('devops-ael-policy-autobooker-dev-ci-cd-5416')
			{
				_dirPipelineRepo ="$_dirPipelineRepo/devops-ael-policy-autobooker-dev-ci-cd-5416";
				println "New pipeline-repo => $_dirPipelineRepo";

				_serviceConfigDirectory = getServiceConfigDiretory();
				_pipelineProps = readProperties file: "${_serviceConfigDirectory}\\${_pipelinePropertyFile}";
				_commonPipelineProps = readProperties file: "dev\\services\\${_commonPipelinePropertyFile}";

				//initialize other build parameters
				initBuildParameters();
			}
		}

		println _messageCheckoutPipelineFinished;		
	}
	catch(Exception e) 
	{
		println _errorMessagePipeleineCheckout;
		_stageArray.put(_stageCheckout,_failure);

		throw e;
	}	
}


/*Checkout the application code*/
def runCheckoutSource()
{
	try 
	{
				
		//creates dir: build-source		
		if(_node_os == _linux)
			sh "mkdir -p ${_dirBuildSource}";
		else
			bat "mkdir ${_dirBuildSource}";

		dir(_dirBuildSource)
		{
			println _messageCheckoutSourceStart;

			executeCommand("git config --global core.longpaths true");

			git credentialsId: _gitCredentialId, url: _gitRepository, branch: _gitBranchName

			println _messageCheckoutSourceFinished;
		}		
	}
	catch(Exception e) 
	{
		println _errorMessageSourceCheckout;
		_stageArray.put(_stageCheckout,_failure);

		throw e;
	}
}


def runSecurityTesting()
{
	try 
	{
		/*todo:runSecurityTesting()*/
	}
	catch(Exception e) 
	{
		println _errorMessageSecurityTesting;
		_stageArray.put(_stageSecurityTesting,_failure);
		throw e;
	}
}


def runBuildAutomation()
{
	try 
	{
		withEnv(["JAVA_HOME=${_jdKHome}", "BUILD_VERSION=${_buildVersion}"])
		{
			dir(_dirBuildSource)
			{
				if(_node_os == _windows)
					bat "gradlew clean assemble" 
				else
				{
					sh "chmod +x ./gradlew"
					sh "./gradlew clean assemble"
				}
			}		
		}
	}
	catch(Exception e) 
	{
		println _errorMessageBuildAutomation;
		_stageArray.put(_stageBuildAutomation,_failure);

		throw e;
	}	
}


def runUnitTest()
{
	try
	{
		withEnv(["JAVA_HOME=${_jdKHome}", "BUILD_VERSION=${_buildVersion}"])
		{
			dir(_dirBuildSource)
			{
				try 
				{				
					if(_node_os == _windows)
						bat "gradlew clean build" 
					else
					{
						sh "chmod +x ./gradlew"
						sh "./gradlew clean build"	
					}				
				}
				catch(Exception err) 
				{
					if(currentBuild.result == _buildUnstable)
						currentBuild.result = _buildFailure;

					throw err;
				}
				finally
				{
					step([$class: 'JUnitResultArchiver', testResults: 'target/test-results/**/*.xml'])
				}	
			}
			
		}
	}
	catch(Exception e)
	{	
		println _errorMessageUnitTest;
		_stageArray.put(_stageUnitTest,_failure);

		throw e;
	}	
}


def runCodeAnalysis()
{
	try 
	{
		println "SonarQube URL is ${_sonarQubeUrl}";
		
		withEnv(["JAVA_HOME=${_jdKHome}", 
			"BUILD_VERSION=${_buildVersion}", 
			"GRADLE_OPTS=-Dsonar.host.url=${_sonarQubeUrl} -Dsonar.login=${_sonarQubeLoginId} -DallowSonarAnalysis=true -Dsonar.branch=${_gitBranchName} -Dsonar.buildbreaker.skip=${_skipSonarQubeBuildBreaker} -Dsonar.projectKey=${_sonarQubeProjectKey}"
			])
		{
			dir(_dirBuildSource)
			{
				if(_node_os == _windows)
					bat "gradlew sonarqube"
				else
				{
					sh "chmod +x ./gradlew"
					sh "./gradlew sonarqube"
				}
			}
		}
	}
	catch(Exception e) 
	{
		println _errorMessageCodeAnalysis;
		_stageArray.put(_stageCodeAnalysis,_failure);

		throw e;
	}
}


def runBuildManagement()
{
	try 
	{
		println ("""GRADLE_OPTS=
                	-Dartifactory.publish.repo.user= ${env.ARTIFACTORY_UID} 
                	-Dartifactory.publish.repo = ${_artifactoryPublishRepo}"""); 
                	//-Dartifactory.publish.repo.pwd = ${env.ARTIFACTORY_PWD}""");
                	//should password be printed on console?
		
		withCredentials([
                	[$class: 'UsernamePasswordMultiBinding', 
                	credentialsId: 'devopspipeline_artifactory_credential_id', 
                	usernameVariable: 'artifactoryUsername', 
                	passwordVariable: 'artifactoryPassword']
                	]) 
		{
			withEnv(["JAVA_HOME=${_jdKHome}", 
				"BUILD_VERSION=${_buildVersion}", 
				"GRADLE_OPTS=-Dartifactory.publish.repo.user=${env.ARTIFACTORY_UID} -Dartifactory.publish.repo=${_artifactoryPublishRepo} -Dartifactory.publish.repo.pwd=${env.ARTIFACTORY_PWD}"])
			{
				dir(_dirBuildSource)
				{
					if(_node_os == _windows)				
						bat "gradlew artifactoryPublish" 
					else 
						sh "./gradlew artifactoryPublish"
				}				
			}
		}		
	}
	catch(Exception e)
	{
		println _errorMessageBuildManagement;
		_stageArray.put(_stageBuildManagement,_failure);

		throw e;
	}
}


def runDeployment()
{
	try
	{
		println "Executing runDeployment";

		withEnv(["JAVA_HOME=${_jdKHome}", "BUILD_VERSION=${_buildVersion}"])
		{
			withCredentials([                	
							[$class: 'UsernamePasswordMultiBinding', 
							credentialsId: 'emea_nprd_credential_id', 
							usernameVariable: 'PCF_USERNAME', 
							passwordVariable: 'PCF_PASSWORD']
							]) 
							{
								try
								{
									println "${_messageDeploymentContainerLogin}";

									def workingDir = pwd();
									def pcfUserName = env.PCF_USERNAME;
									def pcfPassword = env.PCF_PASSWORD;									
									
									println "Pcf Api Url: ${_pcfApiUrl}";									
									println "Pcf Org name: ${_pcfOrgName}";
									println "Pcf Space name : ${_pcfSpaceName}";

									//sh "ls -la ${workingDir}//${_dirBuildSource}//target//archives";
									
									executeCommand("cf login -a ${_pcfApiUrl} -u ${pcfUserName} -p ${pcfPassword} -o ${_pcfOrgName} -s ${_pcfSpaceName}");

									if(_node_os ==_linux)
										sh "cf push -p ${_dirBuildSource}/target/archives/${_artifactoryNamePrefix}-${env.BUILD_VERSION}.war -f ${_dirPipelineRepo}/${_serviceConfigDirectory}/manifest.yml";										
									else
										bat "cf push -p ${_dirBuildSource}\\target\\archives\\${_artifactoryNamePrefix}-${env.BUILD_VERSION}.war -f ${_dirPipelineRepo}\\${_serviceConfigDirectory}\\manifest.yml";									
                                                                                
                                                                         
                    
								}						
								finally
								{
									executeCommand("cf logout");
									println "${_messageDeploymentContainerLogout}";
								}
							}		
		}					
	}
	catch(Exception e)
	{
		println _errorMessageDeployment;
		_stageArray.put(_stageDeployment,_failure);

		throw e;
	}
}

/* --------------------------------------------------------- */

/*Prints selected node OS*/
def printCurrentNode()
{
	if(_node_os ==_linux)
		println "${_uniAnchor} Running on ${_linux} node...!!!";		
	else
		println "${_uniAnchor} Running on ${_windows} node...!!!";		
}


import java.text.SimpleDateFormat;
def captureBuildStartTime()
{
	def dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
	def start = new Date();
	env.BUILD_START = dateFormat.format(start);
}


/*Initialize _stageArray with status "Not Started" to capture build stages*/
def prepareStages()
{
	_stageArray.put(_stageCheckout,_notStarted);
	_stageArray.put(_stageSecurityTesting,_notStarted);
	_stageArray.put(_stageBuildAutomation,_notStarted);
	_stageArray.put(_stageUnitTest,_notStarted);
	_stageArray.put(_stageCodeAnalysis,_notStarted);
	_stageArray.put(_stageBuildManagement,_notStarted);
	_stageArray.put(_stageDeployment,_notStarted);
	_stageArray.put(_stageTestAutomation,_notStarted);	
}


/*Capture the current build stage in CURRENT_STAGE environment variable*/
def setCurrentStage(String currentStage)
{
	env.CURRENT_STAGE =  currentStage;
}

/*Executes shell/batch command based on current node operating system*/
//TODO: Issue a single command irrespective of node OS
def executeCommand(String command)
{
	if(_node_os == _windows)
		bat "${command}"	
	else	
		sh "${command}"
}


/*Returns script file path for specific micro-service*/
def getServiceConfigDiretory()
{
	//microservices
	def bookingRequestApiServiceDirectory = "booking_request_api_service";
	def agentApiServiceDirectory = "agent_api_service";
	def applicationServiceDirectory = "application_service";
	def ruleCacheServiceDirectory = "rule_cache_service";
	def transformationServiceDirectory = "transformation_service";
	def clientServiceDirectory = "client_service";
	def dataServiceDirectory = "data_service";

	def isWindows = _node_os == _windows;
	def serviceDirectory = isWindows ? "dev\\services" : "dev/services";

	switch(env.JOB_BASE_NAME) 
	{		  
		  case "dev-build-job":
			return 	isWindows ? "${serviceDirectory}\\${bookingRequestApiServiceDirectory}" : "${serviceDirectory}/${bookingRequestApiServiceDirectory}";
			break;

		case "dev-build-job-agent-api-service":
			return 	isWindows ? "${serviceDirectory}\\${agentApiServiceDirectory}" : "${serviceDirectory}/${agentApiServiceDirectory}";
			break;

		case "dev-build-job-application-service":
			return isWindows ? "${serviceDirectory}\\${applicationServiceDirectory}" : "${serviceDirectory}/${applicationServiceDirectory}"
			break;

		case "dev-build-job-rule-cache-service":
			return isWindows ? "${serviceDirectory}\\${ruleCacheServiceDirectory}" : "${serviceDirectory}/${ruleCacheServiceDirectory}"
			break;

		case "dev-build-job-transformation-service":
			return isWindows ? "${serviceDirectory}\\${transformationServiceDirectory}" : "${serviceDirectory}/${transformationServiceDirectory}"
			break;

		case "dev-build-job-client-service":
			return isWindows ? "${serviceDirectory}\\${clientServiceDirectory}" : "${serviceDirectory}/${clientServiceDirectory}"
			break;

		case "dev-build-job-data-service":
			return isWindows ? "${serviceDirectory}\\${dataServiceDirectory}" : "${serviceDirectory}/${dataServiceDirectory}"
			break;		
	}
}

/*Initialize build parameters*/
def initBuildParameters()
{
	try 
	{
		_buildVersion = "${_pipelineProps.MAJOR_VER}.${_pipelineProps.MINOR_VER}.${_pipelineProps.PATCH}.${env.BUILD_NUMBER}";
		_artifactoryPublishRepo = _pipelineProps.ARTIFACTORY_PUBLISH_REPO;
		_artifactoryBaseFolder = _pipelineProps.ARTIFACTORY_BASE_FOLDER;
		_artifactoryBuildName = _pipelineProps.ARTIFACT_BUILD_NAME;
		_artifactoryNamePrefix = _pipelineProps.ARTIFACT_NAME_PREFIX;


		/*[ENVIRONMENT]*/
		env.EMAIL_TO = _commonPipelineProps.EMAILTO;
		env.DEV_DEPLOYMENT_SUBJECT = _pipelineProps.DEV_DEPLOYMENT_SUBJECT;
		env.RELEASE_START_DATE = _pipelineProps.RELEASE_START_DATE;
		env.SPRINT_START_DATE = _pipelineProps.SPRINT_START_DATE;
		env.ARTIFACTORY_URL = "${env.ARTIFACTORY_SERVER_URL}webapp/#/artifacts/browse/tree/General/${_artifactoryPublishRepo}/${_artifactoryBaseFolder}/${_buildVersion}";		
		//env.CURRENT_STAGE = "";
		//env.BUILD_START = "";	
		
		/*[OTHER MISC]*/
		_gitRepository = _pipelineProps.GIT_REPO;
		_gitBranchName = _pipelineProps.GIT_BRANCH;
		_applicationUrl = _pipelineProps.APPLICATION_URL;
		_photonDashboardUrl = _pipelineProps.PHOTON_DASHBOARD_URL;
		_sonarQubeProjectKey = _pipelineProps.SONAR_PROJECT_KEY;
		_sonarQubeDashboardUrl = "${_sonarQubeDashboardUrl}${_sonarQubeProjectKey}:${_gitBranchName}";

		/*PCF*/
		_pcfAppName = _pipelineProps.PCF_APPNAME;

		//!!! SetS project specific preference.
		if(_pipelineProps.SKIP_BUILD_BREAKER != null)
			_skipSonarQubeBuildBreaker = _pipelineProps.SKIP_BUILD_BREAKER;//

		//sets path params
		if(_node_os == _linux)
		{
			_jdKHome  				=  tool 'jdk1.8';
			_sonarQubeScannerPath 	=  _sonarQubeScannerPathLinux;
		} 
		else
		{
			//WINDOWS
			_jdKHome 				=  tool "win-jdk-8";
			_sonarQubeHome 			=  tool 'win-sonar-2.8';
			_sonarQubeScannerPath 	=  "${_sonarQubeHome}${_sonarQubeScannerPathWindows}";
		}		

		/*TODO:REMOVE BELOW TEST-CODE*/
		println "JDK HOME: ${_jdKHome}";
		println "BUILD-VERSION: ${_buildVersion}";
		println "EMAIL TO: ${env.EMAIL_TO}";
		println "DEV DEPLOYMENT SUBJECT: ${env.DEV_DEPLOYMENT_SUBJECT}";
		println "RELEASE START DATE: ${env.RELEASE_START_DATE}";
		println "SPRINT START DATE: ${env.SPRINT_START_DATE}";
		println "ARTIFACTORY SERVER URL: ${env.ARTIFACTORY_URL}";
		println "GIT BRANCH: ${_gitBranchName}";
		println "APP URL: ${_applicationUrl}";
		println "PHOTON DASHBOARD: ${_photonDashboardUrl}";
		println "SONARQUBE PROJECT-KEY: ${_sonarQubeProjectKey}";
		println "SONARQUBE URL: ${_sonarQubeUrl}";
		println "SONARQUBE DASHBOARD URL: ${_sonarQubeDashboardUrl}"
		println "SONARQUBE SCANNER-PATH: ${_sonarQubeScannerPath}";
		println "PCF_API_URL: ${_pcfApiUrl}";
		println "PCF_ORG_NAME: ${_pcfOrgName}";
		println "PCF_SPACE: ${_pcfSpaceName}";
		println "PCF_APPNAME: ${_pcfAppName}";
	}
	catch(Exception e) 
	{
		throw e;
	}	
}


def tagIt()
{
	try {

			def commitMessage = "Tagging change set with version $_buildVersion";
			dir(_dirBuildSource)
			{
				sshagent(credentials: ['ssh_devopspipeline_credentials']) 
			      {
			        sh "git pull origin ${_gitBranchName}"

			        sh "git tag -a $_buildVersion -m \"$commitMessage\""

			        sh "git push origin $_buildVersion"
			      }
			}	
	}
	catch(Exception e) {
		println "Exception while tagging the build"	;
		println e;
	}	
}

/*--------------------------------------------------------------------------
  Updates version details
--------------------------------------------------------------------------*/

def updateVersionDetails()
{
  try
  {
    //calls deploy-db-component job
    build job: "${_commitBuild}",
      parameters: [
        [$class: 'StringParameterValue', name: 'jobName', value: env.JOB_BASE_NAME],
        [$class: 'StringParameterValue', name: 'buildVersion', value: _buildVersion],        
	]; 
  }
  catch(Exception ex)
  {
    println "Exception occurred while updating version-details";
    println(ex.toString());
    println(ex.getMessage());
  }
}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
							/*NOTIFICATIONS*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
def sendEmailNotification(status)
{
    def urlArray = [:]

    //common for both success & failure status
    urlArray.put('Photon Dashboard', _photonDashboardUrl);
    urlArray.put('SonarQube Dashboard', _sonarQubeDashboardUrl);

    if(status == _success)
    {   
        urlArray.put('View Application',_applicationUrl);        
        urlArray.put('Artifacts', artifactory_url);

		emailext attachLog: false,
			attachmentsPattern:'sprint-release-notes.txt', 
			body: generateEmailContent(status, urlArray), 			
			subject: "${env.DEV_DEPLOYMENT_SUBJECT} : ${status}",
			to: env.EMAIL_TO;
    }
    else
    {   
        emailext attachLog: true, //attach logs in case of errors
        	body: generateEmailContent(status, urlArray), 
        	subject: "${env.DEV_DEPLOYMENT_SUBJECT} : ${status}",
        	to: env.EMAIL_TO;
   }
}



def generateEmailContent(status,urlArray)
{
    def changeUsers = changelist();
    def icons = ["Monkey","Viper","Crane","Shifu","Mantis","Tigress","Oogway","Zing"];
    def dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    def startDate = dateFormat.parse(env.BUILD_START);
    def endDate = new Date();
    def tookTime = groovy.time.TimeCategory.minus(endDate,startDate).toString();
    def randomN = randomNum();


    def htmlContent = "";
    htmlContent += "<!doctype html><html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
    htmlContent += "<style>body{font-family:Arial;font-size:16px;}.hdcontent,.status a{font-size:16px;text-decoration: underline;}.status a,a img,img{text-decoration:none}.shell-body li,a{word-wrap:break-word}#bodyCell,#bodyTable,body{height:100%!important;margin:0;padding:0;width:100%!important}table{border-collapse:collapse}.hdcontent{width:60%;padding:10px}.status{height:100px;padding:10px 10px 0;border-radius:10px}.status a{color:#FFF}td{color:#FFF;}h3,h4{color:#E35F0B!important;letter-spacing:normal}.tabstyle{width:100px;height:20px;padding:10px;border-bottom:5px solid transparent;cursor:pointer}.tabstyle:hover{border-bottom:5px solid #fff}#templateBody,#templateFooter,#templateHeader{border-bottom:0}.circle-text{color:#707070;padding-left:25px}#outlook a,p{padding:0}#bodyCell,#templateBody,#templateHeader{background-color:#FFF;border-top:0}a img,img{border:0;outline:0}h1,h2,h3,h4,h5,h6{margin:0;padding:0}p{margin:1em 0}.ExternalClass,.ReadMsgBody{width:100%}.ExternalClass,.ExternalClass div,.ExternalClass font,.ExternalClass p,.ExternalClass span,.ExternalClass td{line-height:100%}h1,h2{line-height:125%;text-align:center;font-weight:700;font-style:normal}table,td{mso-table-lspace:0;mso-table-rspace:0}img{-ms-interpolation-mode:bicubic}a,blockquote,body,li,p,table,td{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}a.devopsButton{display:block}.devopsImage{vertical-align:bottom}.devopsTextContent{word-break:break-word}.devopsTextContent img{height:auto!important}.devopsDividerBlock{table-layout:fixed!important}h1{color:#0bd0e2!important;font-size:30px;letter-spacing:-1px}h2{color:#202020!important;font-size:20px;letter-spacing:normal}h3,h4{line-height:125%;text-align:left;}h3{font-size:18px;font-style:normal;font-weight:700}h4{font-size:16px;font-style:normal;font-weight:400}#templatePreheader{background-color:#4caad8;border-top:0;border-bottom:0}.preheaderContainer .devopsTextContent,.preheaderContainer .devopsTextContent p{color:#202020;font-size:14px;line-height:125%;text-align:left}.preheaderContainer .devopsTextContent a{color:#202020;font-weight:400;text-decoration:underline}.headerContainer .devopsTextContent,.headerContainer .devopsTextContent p{color:#202020;font-size:15px;line-height:150%;text-align:center}.headerContainer .devopsTextContent a{color:#E35F0B;font-weight:400;text-decoration:underline},.bodyContainer .devopsTextContent,.bodyContainer .devopsTextContent p{color:#202020;font-size:15px;line-height:150%;text-align:left}.bodyContainer .devopsTextContent a{color:#E35F0B;font-weight:400;text-decoration:underline}#templateFooter{border-top:0}.footerContainer .devopsTextContent,.footerContainer .devopsTextContent p{color:#202020;font-size:16px;line-height:125%;text-align:center}.footerContainer .devopsTextContent a{color:#202020;font-weight:400;text-decoration:underline}@media only screen and (max-width:480px){a,blockquote,body,li,p,table,td{-webkit-text-size-adjust:none!important}body{width:100%!important;min-width:100%!important}#bodyCell{padding-top:10px!important}.templateContainer{max-width:600px!important;width:100%!important}.devopsImage{height:auto!important;width:100%!important}.devopsBoxedTextContentContainer,.devopsCaptionBottomContent,.devopsCaptionLeftImageContentContainer,.devopsCaptionLeftTextContentContainer,.devopsCaptionRightImageContentContainer,.devopsCaptionRightTextContentContainer,.devopsCaptionTopContent,.devopsCartContainer,.devopsImageCardLeftTextContentContainer,.devopsImageCardRightTextContentContainer,.devopsImageGroupContentContainer,.devopsRecContentContainer,.devopsTextContentContainer{max-width:100%!important;width:100%!important}.devopsBoxedTextContentContainer{min-width:100%!important}.devopsImageGroupContent{padding:9px!important}.devopsCaptionLeftContentOuter .devopsTextContent,.devopsCaptionRightContentOuter .devopsTextContent{padding-top:9px!important}.devopsCaptionBlockInner .devopsCaptionTopContent:last-child .devopsTextContent,.devopsImageCardTopImageContent{padding-top:18px!important}.devopsImageCardBottomImageContent{padding-bottom:9px!important}.devopsImageGroupBlockInner{padding-top:0!important;padding-bottom:0!important}.devopsImageGroupBlockOuter{padding-top:9px!important;padding-bottom:9px!important}.devopsBoxedTextContentColumn,.devopsTextContent{padding-right:18px!important;padding-left:18px!important}.devopsImageCardLeftImageContent,.devopsImageCardRightImageContent{padding-right:18px!important;padding-bottom:0!important;padding-left:18px!important}.mcpreview-image-uploader{display:none!important;width:100%!important}h1{font-size:24px!important;line-height:125%!important}h2{font-size:20px!important;line-height:125%!important}.devopsBoxedTextContentContainer .devopsTextContent,.devopsBoxedTextContentContainer .devopsTextContent p,h3{font-size:18px!important;line-height:125%!important}h4{font-size:16px!important;line-height:125%!important}#templatePreheader{display:block!important}.preheaderContainer .devopsTextContent,.preheaderContainer .devopsTextContent p{font-size:14px!important;line-height:115%!important}.bodyContainer .devopsTextContent,.bodyContainer .devopsTextContent p,.headerContainer .devopsTextContent,.headerContainer .devopsTextContent p{font-size:18px!important;line-height:125%!important}.footerContainer .devopsTextContent,.footerContainer .devopsTextContent p{font-size:14px!important;line-height:115%!important}}.shell-wrap{width:90%;margin:0 auto;box-shadow:0 0 30px rgba(0,0,0,.4);-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;float:left}.shell-body{margin:0;padding:5px;list-style:none;background:#141414;color:#45D40C;font:.8em 'Andale Mono',Consolas,'Courier New';line-height:1.6em;-webkit-border-bottom-right-radius:3px;-webkit-border-bottom-left-radius:3px;-moz-border-radius-bottomright:3px;-moz-border-radius-bottomleft:3px;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.shell-body li{position:relative;padding:0 0 0 15px}</style>";
    htmlContent += "</head><body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\"><center><table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"bodyTable\"><tr><td align=\"center\" valign=\"top\" id=\"bodyCell\">";
    htmlContent += "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"><tr><td align=\"center\" valign=\"top\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateHeader\"><tr> <td align=\"center\" valign=\"top\"> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"80%\" class=\"templateContainer\"><tr><td valign=\"top\" class=\"headerContainer\" style=\"padding-top:10px; padding-bottom:10px;\"><table class=\"devopsImageBlock\" style=\"min-width:100%;\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" border=\"0\"><tbody class=\"devopsImageBlockOuter\"><tr><td class=\"devopsImageContent\" style=\"padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;\" valign=\"top\">";						
    htmlContent += "<!-- Image check -->";


    if (status == _failure) 
    {
      htmlContent += "<img alt=\"\" src=\"https://s3.amazonaws.com/devops-lite/KFP/Panda/sad.png\" style=\"max-width:200px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\" class=\"devopsImage\" width=\"200\" align=\"middle\">";                        
    }
    else
    {
      htmlContent += "<img alt=\"\" src=\"https://s3.amazonaws.com/devops-lite/KFP/Panda/happy${randomN}.png\" style=\"max-width:200px; padding-bottom: 0; display: inline !important; vertical-align: bottom;\" class=\"devopsImage\" width=\"200\" align=\"middle\">";                        
    }


    htmlContent += "</td></tr></tbody></table></td></tr></table></td></tr></table></td></tr><tr><td align=\"center\" valign=\"top\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateHeader\"><tr> <td align=\"center\" valign=\"top\"> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"90%\" class=\"templateContainer\"><tr><td valign=\"top\" class=\"headerContainer\" style=\"padding-top:10px; padding-bottom:10px;\">";					
    htmlContent += "<!-- Table color -->";


    if (status == 'Failure') 
    {
      htmlContent += "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"center\" class=\"status\" style=\"background-color:#F00\" id=\"status\">";                        
    }
    else
    {
      htmlContent += "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"center\" class=\"status\" style=\"background-color:#0C6\" id=\"status\">";
    }
    htmlContent += "<tr><td class=\"hdcontent\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"left\"><tr>";
    htmlContent += "<td colspan=\"3\">${env.JOB_NAME}</td></tr><tr><td>Build version</td><td>:</td><td>${_buildVersion}</td></tr><tr><td>Changes by</td><td>:</td>";
    htmlContent += "<td>${changeUsers}</td></tr></table></td><td class=\"hdright\"><table border=\"0\" cellpadding=\"5px\" cellspacing=\"0\" align=\"right\"><tr><td><img src=\"https://s3.amazonaws.com/devops-lite/clock_1.png\" width=\"20px\" height=\"20px\" /></td>";
    htmlContent += "<td>${tookTime}</td></tr><tr><td><img src=\"https://s3.amazonaws.com/devops-lite/Clock_2.png\" width=\"20px\" height=\"20px\" /></td>";
    htmlContent += "<td>${env.BUILD_START}</td></tr></table></td></tr><tr><td colspan=\"3\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"left\"><tr>";
    

    for (it2 in mapToList(urlArray)) 
    {
        key = it2[0]
        value = it2[1]
        htmlContent += "<td class=\"tabstyle\"><a href=\""+value+"\">"+key+"</a></td>";
    }


    htmlContent += "</tr></table></td></tr></table></td></tr></table></td></tr></table></td></tr>";		

    def pipelinehtml = "<tr><td align=\"center\" valign=\"top\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"templateHeader\"><tr> <td align=\"center\" valign=\"top\"> <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"80%\" class=\"templateContainer\"><tr><td valign=\"top\" class=\"headerContainer\" style=\"padding-top:10px; padding-bottom:10px;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"80%\" align=\"center\"><tr>";
        def counter = 0;
        for (it2 in mapToList(_stageArray)) 
        {
            key = it2[0]
            value = it2[1]
            def color = "grey";
            if(value == "Success")
                color = "green";
            else if(value == 'Failure')
                color = 'red';	
            pipelinehtml += "<td align=\"center\"><div class=\"circle\"><img src=\"https://s3.amazonaws.com/devops-lite/KFP/${icons[counter % icons.size()]}/${color}.png\"/></div><div class=\"circle-text\">${key}</div></td>";
            
            if (counter != _stageArray.size() - 1)
                pipelinehtml += "<td width=\"75px\" align=\"center\"><img src=\"https://s3.amazonaws.com/devops-lite/cline.png\"/></td>";
            counter++;
        }

    pipelinehtml += "</tr></table></td></tr></table></td></tr></table></td></tr>";
    htmlContent += pipelinehtml;
    htmlContent += "<tr> <td> <table class=\"templateContainer\" border=\"0\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"> <tbody> <tr> <td align=\"center\" valign=\"bottom\"><img class=\"devopsIHEADmage\" width=\"600\" height=\"100\" style=\"display:block;\" src=\"https://s3.amazonaws.com/devops-lite/KFP/goldenfields_top.png\"></td></tr></tbody> </table> </td></tr><tr bgcolor=\"#FDB813\"> <td align=\"center\" valign=\"top\" style=\"padding-bottom:10px;\"> <table id=\"templateFooter\" border=\"0\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"> <tbody> <tr> <td align=\"center\" valign=\"top\"> <table class=\"templateContainer\" border=\"0\" width=\"600\" cellspacing=\"0\" cellpadding=\"0\"> <tbody> <tr> <td align=\"center\" valign=\"top\"><img class=\"devopsImage\" width=\"600\" height=\"40\" style=\"display:block;\" src=\"https://s3.amazonaws.com/devops-lite/KFP/goldenfields_bottom.png\"></td></tr></tbody> </table> </td></tr><tr><td align=\"right\" style=\"padding-right:15px;\" valign=\"middle\" height=\"80px\"><img src=\"https://s3.amazonaws.com/devops-lite/devops-logo.png\" style=\"-moz-border-top-colors: none; -moz-border-right-colors: none; -moz-border-bottom-colors: none; -moz-border-left-colors: none; border-image: none; width: 52px; height: 60px; margin: 0px;vertical-align:middle;\" height=\"60\" width=\"52\"></td></tr></tbody> </table> </td></tr>";
    htmlContent += "</table></td></tr></table></center></body></html>";
    return htmlContent;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
							/*UTILS*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

@NonCPS
def mapToList(depmap) 
{
    def dlist = []
    for (entry in depmap) 
    {
        dlist.add([entry.key, entry.value])
    }
    dlist
}

import java.util.Random  
@NonCPS
def randomNum()
{
	Random rand = new Random()  
	int max = 3  
	return rand.nextInt(max+1)  
} 

@NonCPS  
def changelist() 
{
    def changes = [] as Set
    currentBuild.changeSets.each { set ->
        set.each { entry ->
            changes.add("${entry.author.fullName}")
        }
    }
    return changes.join(", ")
}


def IsNullOrEmpty(componentVersion) {
	return componentVersion == null || componentVersion == "";
}


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*--------------------------------------------------------------------------
  Deploy to PCF container
--------------------------------------------------------------------------*/
def runBlueGreenDeployment() 
{
	retry(3)
	{
		try 
		{

			println "Executing runDeployment";

			withEnv(["JAVA_HOME=${_jdKHome}", "BUILD_VERSION=${_buildVersion}"]) {
				//emea_nprd_credential_id(prod)/ael_pcf_credential_id(test)
				withCredentials([
					[$class: 'UsernamePasswordMultiBinding',
						credentialsId: 'emea_nprd_credential_id',
						usernameVariable: 'PCF_USERNAME',
						passwordVariable: 'PCF_PASSWORD'
					]
				]) {
					try {

						def toRunInBlueGreenMode = true;

						def workingDir = pwd();
						println "Working directory : $workingDir";


						def pcfUserName = env.PCF_USERNAME;
						def pcfPassword = env.PCF_PASSWORD;

						def pcfTempAppName = "$_pcfAppName-temp";
						def applicationPackage = "${_dirBuildSource}/target/archives/${_artifactoryNamePrefix}-${env.BUILD_VERSION}.war";
						def manifestFile = "${_dirPipelineRepo}/${_serviceConfigDirectory}/manifest.yml";

						println "Pcf App Domain : $_pcfAppDomain";
						println "Pcf Api Url: $_pcfApiUrl";
						println "Pcf Org name: $_pcfOrgName";
						println "Pcf Space name : $_pcfSpaceName";
						println "Pcf App name : $_pcfAppName";
						println "Pcf Temp App name : $pcfTempAppName";

						println "Package Name : $applicationPackage";
						println "Manifest file: $manifestFile";


						sh "cf login -a $_pcfApiUrl -u $pcfUserName -p $pcfPassword -o $_pcfOrgName -s $_pcfSpaceName";

						//delete *green app if already exists
						try {
							sh "cf delete $pcfTempAppName -r -f";
						}
						catch(Exception e) {
							println "--> *green app does not exist, good to go!!";
						}						

						try 
						{
							//Check to see ensure the old/blue app exists
							sh "cf app $_pcfAppName"

						} catch (Exception e) {
							println "--> The old version(*blue) no longer exists!";
							
							//in case of exception, should call normal deployment
							toRunInBlueGreenMode = false;
						}
						
						if(toRunInBlueGreenMode)
						{
							//push the temp version of the app (manifest reflects pcfTempAppName)
							sh "cf push -p $applicationPackage -f $manifestFile --no-route"

							try {

								//Map real route to the newly pushed temp app
								sh "cf map-route $pcfTempAppName $_pcfAppDomain -n $_pcfAppName";	

							} catch (Exception e){
								println "--> Nothing to map from -- old/(*blue) version of application not found";
							}

							try 
							{
								//stop routing requests to old version of the app
								sh "cf unmap-route $_pcfAppName $_pcfAppDomain -n $_pcfAppName";

							} catch (Exception e){
								println "--> Nothing to unmap -- old/(*blue) version of application not found";
							}

							try 
							{
								//delete the OLD version of the app
								sh "cf delete $_pcfAppName -f"

							} catch (Exception e) {
								println "--> Nothing to delete -- old/(*blue) version of application not found";			                        	
							}

							//rename the newly pushed TEMP app to the real app name
							sh "cf rename $pcfTempAppName $_pcfAppName"
						}
						else
						{
							//push normal deployment instead blue-green, with -temp and route with -temp
							println "--> Running normal deployment!!"							
							sh "cf push -p $applicationPackage -f $manifestFile"

							//rename app
							sh "cf rename $pcfTempAppName $_pcfAppName"

							//delete-temp/old-route
							sh "cf delete-route $_pcfAppDomain -n $pcfTempAppName -f"

							//create-route
							sh "cf create-route $_pcfSpaceName $_pcfAppDomain -n $_pcfAppName"

							//map-route
							sh "cf map-route $_pcfAppName $_pcfAppDomain -n $_pcfAppName"
						}
					} finally {
						sh "cf logout";
						println "--> Logged out PCF...";
					}
				}
			}
		} catch (Exception ex) 
		{		
			println _errorMessageDeployment;
			throw ex;
		}	
	}	
}

/*--------------------------------------------------------------------------
  Clone any repository
--------------------------------------------------------------------------*/
def clonerepo(node_os, repo_url, branch){
withCredentials([string(credentialsId: 'comm_git_clone_token', variable: 'comm_git_clone_token')]) {
		if(node_os == 'WIN') {
			bat "git clone -b ${branch} https://${comm_git_clone_token}@${repo_url}";
			println "Cloned the repo";
		}
		else
		{
			sh "scl enable rh-git29 -- git clone -b ${branch} https://${comm_git_clone_token}@${repo_url}"
			println "Cloned the repo";
		}
    }
}